(+ 1 2)
(- 2 3)
(* (+ 3 4) (/ 9 3))
(quote (1 2 3))
(< 1 2)
(> 1 2)
(list 1 2 3)
(car (quote (1 2 3)))
(cdr (quote (1 2 3)))
(cons 1 (quote (2 3)))
(define x2 (lambda (x) (* x 2)))
(x2 10)
(define add (lambda (x y) (+ x y)))
(add 1 10)
(define fact (lambda (n) (if (< n 1) 1 (* n (fact (- n 1))))))
(fact 10)
(define map (lambda (f x) (if (null? x) () (cons (f (car x)) (map f (cdr x))))))
(define plus1 (lambda (x) (+ x 1)))
(map plus1 (quote (1 2 3)))
